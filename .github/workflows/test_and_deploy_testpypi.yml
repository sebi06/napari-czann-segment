# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: test_and_deploy_testpypi

on:
  push:
    branches:
      - main
      - npe2
      - work-in-progress
      - work_in_progress
    tags:
      - "testpypi-v*" # Push events to matching testpypi-v*, i.e. testpypi-v1.0
  pull_request:
    branches:
      - main
      - npe2
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30
    strategy:
      matrix:
        platform: [windows-latest, ubuntu-latest]
        python-version: ['3.11']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # these libraries enable testing on Qt on linux
      - uses: tlambert03/setup-qt-libs@v1

      # strategy borrowed from vispy for installing opengl libs on windows
    #   - name: Install Windows OpenGL
    #     if: runner.os == 'Windows'
    #     run: |
    #       git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
    #       powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Download Mesa OpenGL DLLs
        if: runner.os == 'Windows'
        run: |
          mkdir mesa
          curl -L -o mesa/opengl32.dll https://github.com/vispy/demo-data/raw/main/mesa/opengl32_mingw_64.dll

      - name: Set PATH for Mesa OpenGL
        if: runner.os == 'Windows'
        run: echo "$PWD/mesa" | Out-File -Append -Encoding ascii $env:GITHUB_PATH

      - name: Install Microsoft Visual C++ Redistributable
        if: runner.os == 'Windows'
        run: |
          curl -L -o vc_redist.x64.exe https://aka.ms/vs/17/release/vc_redist.x64.exe
          .\vc_redist.x64.exe /install /quiet /norestart

      # note: if you need dependencies from conda, considering using
      # setup-miniconda: https://github.com/conda-incubator/setup-miniconda
      # and
      # tox-conda: https://github.com/tox-dev/tox-conda
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools tox tox-gh-actions pytest pytest-cov pytest-qt

      # this should work inside CI environments    
      - name: Install onnxruntime for Windows
        if: runner.os == 'Windows'
        run: python -m pip install onnxruntime==1.19.0
        env:
          # Force CPU-only mode and help with DLL loading
          CUDA_VISIBLE_DEVICES: ""
          OMP_NUM_THREADS: 1
          KMP_DUPLICATE_LIB_OK: TRUE

      - name: Set Qt environment for headless testing
        run: |
          echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV

      # this runs the platform-specific tests declared in tox.ini
      - name: Test with tox
        uses: aganders3/headless-gui@v2
        with:
          run: python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}
          # Force CPU-only mode for onnxruntime in CI
          OMP_NUM_THREADS: 1
          CUDA_VISIBLE_DEVICES: ""
          # Help with DLL loading issues on Windows
          KMP_DUPLICATE_LIB_OK: TRUE

    #   # this runs the platform-specific tests declared in tox.ini
    #   - name: Test with tox
    #     #uses: GabrielBB/xvfb-action@v1
    #     uses: coactions/setup-xvfb@v1
    #     with:
    #       run: python -m tox
    #     env:
    #       PLATFORM: ${{ matrix.platform }}

      - name: Coverage
        uses: codecov/codecov-action@v3

  deploy:
    # this will run when you have tagged a commit, starting with "testpypi-*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [test]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'tags')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
          .
      - name: Build and publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TWINE_TESTPYPI_TOKEN }}
          repository-url: https://test.pypi.org/legacy/ 
